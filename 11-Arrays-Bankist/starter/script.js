 'use strict';

/////////////////////////////////////////////////
/////////////////////////////////////////////////
// BANKIST APP

// Data
const account1 = {
  owner: 'Bui Duc Duong',
  movements: [200, 450, -400, 3000, -650, -130, 70, 1300],
  interestRate: 1.2, // %
  pin: 1111,
};

const account2 = {
  owner: 'Bui Thu Thuy Linh',
  movements: [5000, 3400, -150, -790, -3210, -1000, 8500, -30],
  interestRate: 1.5,
  pin: 2222,
};

const account3 = {
  owner: 'Nguyen Dinh Thien',
  movements: [200, -200, 340, -300, -20, 50, 400, -460],
  interestRate: 0.7,
  pin: 3333,
};

const account4 = {
  owner: 'Bui Thai Hung',
  movements: [430, 1000, 700, 50, 90],
  interestRate: 1,
  pin: 4444,
};

const accounts = [account1, account2, account3, account4];
// console.log(accounts);
// Elements
const labelWelcome = document.querySelector('.welcome');
const labelDate = document.querySelector('.date');
const labelBalance = document.querySelector('.balance__value');
const labelSumIn = document.querySelector('.summary__value--in');
const labelSumOut = document.querySelector('.summary__value--out');
const labelSumInterest = document.querySelector('.summary__value--interest');
const labelTimer = document.querySelector('.timer');

const containerApp = document.querySelector('.app');
const containerMovements = document.querySelector('.movements');

const btnLogin = document.querySelector('.login__btn');
const btnTransfer = document.querySelector('.form__btn--transfer');
const btnLoan = document.querySelector('.form__btn--loan');
const btnClose = document.querySelector('.form__btn--close');
const btnSort = document.querySelector('.btn--sort');

const inputLoginUsername = document.querySelector('.login__input--user');
const inputLoginPin = document.querySelector('.login__input--pin');
const inputTransferTo = document.querySelector('.form__input--to');
const inputTransferAmount = document.querySelector('.form__input--amount');
const inputLoanAmount = document.querySelector('.form__input--loan-amount');
const inputCloseUsername = document.querySelector('.form__input--user');
const inputClosePin = document.querySelector('.form__input--pin');

const displayMovements = function (movements) {
  containerMovements.innerHTML = '';

  movements.forEach(function (mov, i) {
    const type = mov > 0 ? 'deposit' : 'withdrawal';

    const html = `
    <div class="movements__row">
      <div class="movements__type movements__type--${type}">${
      i + 1
    } ${type}</div>
      <div class="movements__value">${mov}‚Ç¨</div>
    </div>
    `;

    containerMovements.insertAdjacentHTML('afterbegin', html);
  });
};
// displayMovements(account1.movements);

const calcDisplayBalance = function (acc) {
  acc.balance = acc.movements.reduce((acc, cur) => acc + cur, 0);
  labelBalance.textContent = `${acc.balance} ‚Ç¨`;
};
// calcDisplayBalance(account1);
// console.log(account1);

const calcDisplaySummary = function (acc) {
  const incomes = acc.movements
    .filter(mov => mov > 0)
    .reduce((acc, mov, i, arr) => {
      // console.log(arr);
      // console.log(acc + mov);
      return acc + mov;
    }, 0);
  labelSumIn.textContent = `${incomes}‚Ç¨`;

  const outcomes = acc.movements
    .filter(mov => mov < 0)
    .reduce((acc, mov, i, arr) => {
      // console.log(arr);
      // console.log(acc + mov);
      return acc + mov;
    }, 0);
  labelSumOut.textContent = `${Math.abs(outcomes)}‚Ç¨`;

  const interest = acc.movements
    .filter(mov => mov > 0)
    .map(deposit => (deposit * acc.interestRate) / 100)
    .filter(int => int >= 1)
    .reduce((acc, int) => acc + int, 0);

  labelSumInterest.textContent = `${interest}‚Ç¨`;
};
// calcDisplaySummary(account1.movements);
// console.log(calcDisplaySummary(account1.movements));

const createUsernames = function (accs) {
  for (const val of accs) {
    val.username = val.owner
      .toLowerCase()
      .split(' ')
      .map(name => name[0])
      .join('');
  }
};
createUsernames(accounts);

// UPDATE UI
const updateUI = function (acc) {
  //Display movements
  displayMovements(acc.movements);

  //Display balance
  calcDisplayBalance(acc);

  //Display summary
  calcDisplaySummary(acc);
};

// Event handler
let currentAccount;

btnLogin.addEventListener('click', function (e) {
  // Prevent form from submitting
  e.preventDefault();

  currentAccount = accounts.find(
    acc => acc.username === inputLoginUsername.value
  );
  console.log(currentAccount);

  if (currentAccount?.pin === Number(inputLoginPin.value)) {
    // console.log('LOGIN');
    // Display UI and message
    labelWelcome.textContent = `Welcome back, ${
      currentAccount.owner.split(' ')[
        currentAccount.owner.split(' ').length - 1
      ]
    }`;
    containerApp.style.opacity = 100;

    // Clear inputLogin&Pin fields
    inputLoginPin.value = inputLoginUsername.value = '';
    inputLoginPin.blur();

    updateUI(currentAccount);
  }
});

btnTransfer.addEventListener('click', function (e) {
  e.preventDefault();
  const amount = Number(inputTransferAmount.value);
  const receiverAcc = accounts.find(
    acc => acc.username === inputTransferTo.value
  );
  // Clear InputTranfer fields
  inputTransferAmount.value = inputTransferTo.value = '';
  inputTransferTo.blur();

  // CHECK amount and receiverAcc
  if (
    amount > 0 &&
    // receiverAcc &&
    currentAccount.balance >= amount &&
    receiverAcc.username !== currentAccount.username
  ) {
    // console.log('Transfer valid');
    currentAccount.movements.push(-amount);
    receiverAcc.movements.push(amount);
    updateUI(currentAccount);
  }
});

// const createUsernames = function (accs) {
//   accs.forEach(function (acc) {
//     acc.username = acc.owner
//       .toLowerCase()
//       .split(' ')
//       .map(name => name[0])
//       .join('');
//   });
// };
// createUsernames(accounts);
// console.log(accounts);

/////////////////////////////////////////////////
/////////////////////////////////////////////////
// LECTURES

// const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];

/////////////////////////////////////////////////

/* let arr = ['a', 'b', 'c', 'd', 'e'];

// SLICE
console.log(arr.slice(2));
console.log(arr.slice(-2));
console.log(arr.slice(-4, -1));
console.log(arr.slice());
console.log([...arr]);

// const arr2 = arr.slice();
// console.log([...arr2]);

// SPLICE
console.log(arr);
// console.log(arr.slice(-3));
// console.log(arr.splice(2, 3));
arr.splice(2, 3);
console.log(arr);

// REVERSE

arr = ['a', 'b', 'c', 'd', 'e'];
const arr2 = ['j', 'i', 'h', 'g', 'f'];
console.log(arr2.reverse());
console.log(arr2);

// CONCAT

const letters = arr.concat(arr2);
console.log(letters);
console.log([...arr, ...arr2]);

// JOIN

console.log(letters.join(' - ')); */

/* const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];

for (const [i, movement] of movements.entries()) {
  if (movement > 0) {
    console.log(`Movement ${i + 1}: You deposited ${movement}`);
  } else {
    console.log(`Movement ${i + 1}: You withdrew ${Math.abs(movement)}`);
  }
}

console.log('========= FOR EACH ==========');

movements.forEach(function (mov, i, arr) {
  if (mov > 0) {
    console.log(`Movement ${i + 1}: You deposited ${mov}`);
  } else {
    console.log(`Movement ${i + 1}: You withdrew ${Math.abs(mov)}`);
  }
}); */

/* 
 // MAP 
const currencies = new Map([
  ['USD', 'United States dollar'],
  ['EUR', 'Euro'],
  ['GBP', 'Pound sterling'],
]);

currencies.forEach(function (val, i, map) {
  console.log(`\n${i}: ${val}`);
});

// SET
const currenciesUnique = new Set(['USD', 'GBP', 'EUR']);
console.log(currenciesUnique);

currenciesUnique.forEach(function (value, _, set) {
  console.log(`${value}: ${_}`);
});
 */
///////////////////////////////////////
// Coding Challenge #1

/* 
Julia and Kate are doing a study on dogs. So each of them asked 5 dog owners about their dog's age, and stored the data into an array (one array for each). For now, they are just interested in knowing whether a dog is an adult or a puppy. A dog is an adult if it is at least 3 years old, and it's a puppy if it's less than 3 years old.
Julia v√† Kate ƒëang th·ª±c hi·ªán m·ªôt nghi√™n c·ª©u tr√™n ch√≥. V√¨ v·∫≠y, m·ªói ng∆∞·ªùi trong s·ªë h·ªç h·ªèi 5 ch·ªß s·ªü h·ªØu ch√≥ v·ªÅ tu·ªïi con ch√≥ c·ªßa h·ªç v√† l∆∞u tr·ªØ d·ªØ li·ªáu v√†o m·ªôt m·∫£ng (m·ªói m·∫£ng m·ªôt m·∫£ng). Hi·ªán t·∫°i, h·ªç ch·ªâ quan t√¢m ƒë·∫øn vi·ªác bi·∫øt m·ªôt con ch√≥ ƒë√£ tr∆∞·ªüng th√†nh hay m·ªôt con ch√≥ con. M·ªôt con ch√≥ tr∆∞·ªüng th√†nh n·∫øu n√≥ √≠t nh·∫•t 3 tu·ªïi, v√† m·ªôt con ch√≥ con n·∫øu n√≥ d∆∞·ªõi 3 tu·ªïi.

Create a function 'checkDogs', which accepts 2 arrays of dog's ages ('dogsJulia' and 'dogsKate'), and does the following things:
T·∫°o m·ªôt h√†m 'checkDogs', ch·∫•p nh·∫≠n 2 m·∫£ng tu·ªïi c·ªßa ch√≥ ('dogJulia' v√† 'dogKate') v√† th·ª±c hi·ªán nh·ªØng vi·ªác sau:

1. Julia found out that the owners of the FIRST and the LAST TWO dogs actually have cats, not dogs! So create a shallow copy of Julia's array, and remove the cat ages from that copied array (because it's a bad practice to mutate function parameters)
1. Julia ph√°t hi·ªán ra r·∫±ng ch·ªß nh√¢n c·ªßa hai con ch√≥ ƒê·∫¶U TI√äN v√† CU·ªêI C√ôNG th·ª±c s·ª± l√† m√®o ch·ª© kh√¥ng ph·∫£i ch√≥! V√¨ v·∫≠y, h√£y t·∫°o m·ªôt b·∫£n sao n√¥ng c·ªßa m·∫£ng c·ªßa Julia v√† x√≥a c√°c tu·ªïi m√®o kh·ªèi m·∫£ng ƒë√£ sao ch√©p ƒë√≥ (v√¨ vi·ªác thay ƒë·ªïi c√°c tham s·ªë h√†m l√† m·ªôt th√≥i quen x·∫•u)
2. Create an array with both Julia's (corrected) and Kate's data
2. T·∫°o m·ªôt m·∫£ng v·ªõi c·∫£ d·ªØ li·ªáu c·ªßa Julia (ƒë√£ s·ª≠a) v√† c·ªßa Kate
3. For each remaining dog, log to the console whether it's an adult ("Dog number 1 is an adult, and is 5 years old") or a puppy ("Dog number 2 is still a puppy üê∂")
3. ƒê·ªëi v·ªõi m·ªói con ch√≥ c√≤n l·∫°i, h√£y ƒëƒÉng nh·∫≠p v√†o b·∫£ng ƒëi·ªÅu khi·ªÉn cho d√π ƒë√≥ l√† ng∆∞·ªùi l·ªõn ("Con ch√≥ s·ªë 1 ƒë√£ tr∆∞·ªüng th√†nh v√† 5 tu·ªïi") hay m·ªôt con ch√≥ con ("Con ch√≥ s·ªë 2 v·∫´n l√† m·ªôt con ch√≥ con üê∂"
4. Run the function for both test datasets
4. Ch·∫°y ch·ª©c nƒÉng cho c·∫£ hai t·∫≠p d·ªØ li·ªáu th·ª≠ nghi·ªám

HINT: Use tools from all lectures in this section so far üòâ

TEST DATA 1: Julia's data [3, 5, 2, 12, 7], Kate's data [4, 1, 15, 8, 3]
TEST DATA 2: Julia's data [9, 16, 6, 8, 3], Kate's data [10, 5, 6, 1, 4]

GOOD LUCK üòÄ
*/

/* const checkDogs = function (dogsJulia, dogsKate) {
  const dogsJuliaCorrected = dogsJulia.slice(1, 4);
  console.log(dogsJuliaCorrected);

  const dogs = dogsJuliaCorrected.concat(dogsKate);
  console.log(dogs);
  // "Dog number 1 is an adult, and is 5 years old") or a puppy ("Dog number 2 is still a puppy üê∂"

  dogs.forEach(function (val, i) {
    if (val >= 3) {
      console.log(`Dog number ${i + 1} is an adult üêï, and is ${val} years old`);
    } else if (val < 3) {
      console.log(`Dog number ${i + 1} is still a puppy üê∂, and is ${val} years old`);
    }
  });
};
checkDogs([3, 5, 2, 12, 7], [4, 1, 15, 8, 3]); */

/////////////////// MAP METHOD /////////////
/* const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];

const eurToUsd = 1.1;

const movementsUSD = movements.map(mov => mov * eurToUsd);

console.log(movements);
console.log(movementsUSD);

const movementsUSDfor = [];
for (const mov of movements) {
  movementsUSDfor.push(`${mov * eurToUsd}`);
}
console.log(movementsUSDfor);

const movDescriptions = movements.map(
  (val, i) =>
    `Movement ${i + 1}: You ${val > 0 ? 'deposited' : 'withdrew'} ${Math.abs(
      val
    )}`
);
console.log(movDescriptions); */

//////////// FILTER METHOD ///////////////////
/* const deposits = movements.filter(function (val) {
  return val > 0;
});
console.log(deposits);

// const depositsMap = movements.map(val => val>0)
// console.log(depositsMap);

const depositsFor = [];
for (const val of movements) {
  if (val > 0) {
    depositsFor.push(val);
  }
}
console.log(depositsFor);

const withdrawals = movements.filter(val => val < 0);
console.log(withdrawals); */

//////////////// REDUCE METHOD //////////////
/* const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];

const balance = movements.reduce((acc, cur, i, arr) => {
  console.log(`Iteration ${i}: ${acc}`);
  return acc + cur;
}, 0);
console.log(balance);

console.log(movements);
// const max = movements.reduce((acc, mov) => {
//   if (acc > mov) return acc;
//   else return mov;
// }, 200);

const max = movements.reduce((acc, cur) => {
  if (acc > cur) return acc;
  else return cur;
}, movements[0]);
console.log(max); */

///////////////////////////////////////
// Coding Challenge #2

/* 
Let's go back to Julia and Kate's study about dogs. This time, they want to convert dog ages to human ages and calculate the average age of the dogs in their study.

Create a function 'calcAverageHumanAge', which accepts an arrays of dog's ages ('ages'), and does the following things in order:
848 / 5000
H√£y quay l·∫°i nghi√™n c·ª©u c·ªßa Julia v√† Kate v·ªÅ lo√†i ch√≥. L·∫ßn n√†y, h·ªç mu·ªën chuy·ªÉn ƒë·ªïi tu·ªïi ch√≥ sang tu·ªïi ng∆∞·ªùi v√† t√≠nh tu·ªïi trung b√¨nh c·ªßa nh·ªØng con ch√≥ trong nghi√™n c·ª©u c·ªßa h·ªç.

T·∫°o m·ªôt h√†m 'calcAverageHumanAge', h√†m n√†y ch·∫•p nh·∫≠n m·ªôt m·∫£ng tu·ªïi c·ªßa con ch√≥ ('age') v√† th·ª±c hi·ªán nh·ªØng vi·ªác sau theo th·ª© t·ª±:


1. Calculate the dog age in human years using the following formula: if the dog is <= 2 years old, humanAge = 2 * dogAge. If the dog is > 2 years old, humanAge = 16 + dogAge * 4.
1. T√≠nh tu·ªïi ch√≥ theo nƒÉm c·ªßa con ng∆∞·ªùi b·∫±ng c√¥ng th·ª©c sau: n·∫øu ch√≥ <= 2 tu·ªïi, th√¨ humanAge = 2 * dogAge. N·∫øu ch√≥> 2 tu·ªïi, humanAge = 16 + dogAge * 4.

2. Exclude all dogs that are less than 18 human years old (which is the same as keeping dogs that are at least 18 years old)
2. Lo·∫°i tr·ª´ t·∫•t c·∫£ nh·ªØng con ch√≥ d∆∞·ªõi 18 tu·ªïi c·ªßa con ng∆∞·ªùi (c≈©ng gi·ªëng nh∆∞ nu√¥i nh·ªØng con ch√≥ t·ª´ 18 tu·ªïi tr·ªü l√™n)

3. Calculate the average human age of all adult dogs (you should already know from other challenges how we calculate averages üòâ)
3. T√≠nh tu·ªïi trung b√¨nh c·ªßa con ng∆∞·ªùi c·ªßa t·∫•t c·∫£ c√°c con ch√≥ tr∆∞·ªüng th√†nh (b·∫°n n√™n bi·∫øt t·ª´ c√°c th·ª≠ th√°ch kh√°c c√°ch ch√∫ng t√¥i t√≠nh trung b√¨nh üòâ)

4. Run the function for both test datasets

TEST DATA 1: [5, 2, 4, 1, 15, 8, 3]
TEST DATA 2: [16, 6, 10, 5, 6, 1, 4]

GOOD LUCK üòÄ
*/

/* const calcAverageHumanAge = function (ages) {
  const humanAge = ages.map(age => (age <= 2 ? 2 * age : 16 + age * 4));
  // console.log(humanAge);
  // return humanAge;

  const adults = humanAge.filter(age => age >= 18);
  // return adults;
  // console.log(adults);

  const average = adults.reduce((acc, cur) => acc + cur, 0) / adults.length;
  return `${humanAge} \n${adults} \n${average}\n`;
};
const age1 = calcAverageHumanAge([5, 2, 4, 1, 15, 8, 3]);
const age2 = calcAverageHumanAge([16, 6, 10, 5, 6, 1, 4]);

console.log(age1, age2);
 */

// const eurToUsd = 1.1;
// const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];

/* const max = movements.reduce((acc, mov) => {
  if (acc > mov) {
    return acc;
  } else return mov;
}, movements[0]);
console.log(max); */

/* const totalDepositsUSD = movements
  .filter(mov => mov > 0)
  .map((mov, i, arr) => {
    console.log(arr);
    return mov * eurToUsd;
  })
  .reduce((acc, mov) => acc + mov, 0);
// console.log(totalDepositsUSD);

const firstWithdrawal = movements.find(mov => mov < 0);
console.log(movements);
console.log(firstWithdrawal);

console.log(accounts);
const account = accounts.find(acc => acc.owner === 'Bui Thu Thuy Linh');
console.log(account);
 */
 